// /app/product/[slug]/page.tsx
import { notFound } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import Link from 'next/link';

interface PageProps {
    params: { slug: string };
}

// --- ‚úÖ SEO-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ---
export async function generateMetadata({ params }: PageProps) {
    const product = await prisma.busbar.findUnique({
        where: { slug: params.slug },
        include: { series: true },
    });

    if (!product) return {};

    const title = `${product.name}${product.series ? ' ‚Äì ' + product.series.name : ''}`;
    const description = product.description || '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∏–Ω–æ–ø—Ä–æ–≤–æ–¥—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ';
    const image = product.imageUrl || '/images/placeholder.jpg';

    return {
        title,
        description,
        openGraph: {
            title,
            description,
            images: [{ url: image }],
            type: 'website',
        },
        twitter: {
            card: 'summary_large_image',
            title,
            description,
            images: [image],
        },
    };
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
export default async function ProductPage({ params }: PageProps) {
    const slug = params.slug;

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è busbars –∏ kits)
    let item =
        (await prisma.busbar.findUnique({
            where: { slug },
            include: {
                category: true,
                series: true,
                brand: true,
                components: { include: { component: true } },
            },
        })) ||
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
        (await prisma.component.findUnique({
            where: { slug },
        }));

    if (!item) return notFound();

    const isProduct = 'category' in item;
    const isKit = isProduct && item.category?.slug === 'kits';

    // --- ‚úÖ Structured Data (JSON-LD) ---
    const productJsonLd = {
        '@context': 'https://schema.org/',
        '@type': 'Product',
        name: item.name,
        description: item.description,
        image: item.imageUrl || '/images/placeholder.jpg',
        brand: item.brand ? item.brand.name : '–°–≤–æ–π –±—Ä–µ–Ω–¥',
        sku: item.slug,
        offers: {
            '@type': 'Offer',
            url: `https://yourdomain.com/product/${item.slug}`,
            availability: 'https://schema.org/InStock',
            priceCurrency: 'RUB',
            // üëá –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ü–µ–Ω–∞ –≤ –ë–î ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            price: '0.00',
        },
    };

    const placeholder = '/images/placeholder.jpg'; // üëà —Å–¥–µ–ª–∞–π –ª—é–±–æ–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    return (
        <main className="p-10 max-w-screen-xl mx-auto">
            {/* üëá Structured Data –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ head —á–µ—Ä–µ–∑ script */}
            <script
                type="application/ld+json"
                dangerouslySetInnerHTML={{ __html: JSON.stringify(productJsonLd) }}
            />
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-10">
                <div>
                    <img
                        src={item.imageUrl ?? placeholder}
                        alt={item.name}
                        className="rounded-lg w-full max-h-96 object-contain bg-white"
                    />
                </div>

                <div>
                    <h1 className="text-3xl font-bold mb-4">{item.name}</h1>

                    {/* –°–µ—Ä–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∏–Ω–æ–ø—Ä–æ–≤–æ–¥–æ–≤ */}
                    {isProduct && !isKit && item.series && (
                        <p className="mb-4">–°–µ—Ä–∏—è: {item.series.name}</p>
                    )}

                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤—Å–µ—Ö */}
                    {isProduct && (
                        <p className="mb-2 text-sm text-muted">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category?.name}</p>
                    )}

                    <p className="mb-6">{item.description}</p>

                    <div className="mb-4">
                        <strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong>
                        <ul className="mt-2 space-y-1">
                            {Object.entries(item.specs || {})
                                .filter(
                                    ([_, value]) =>
                                        value !== null && value !== undefined && value !== '',
                                )
                                .map(([key, value]) => (
                                    <li key={key} className="flex gap-2 text-sm">
                                        <span className="font-medium">{key}:</span>
                                        <span>{String(value)}</span>
                                    </li>
                                ))}
                        </ul>
                    </div>

                    <div className="flex gap-4 mb-6">
                        <button className="btn btn-accent">–ó–∞–ø—Ä–æ—Å–∏—Ç—å</button>
                        <button className="btn btn-outline">–í –∫–æ—Ä–∑–∏–Ω—É</button>
                    </div>

                    {'drawingUrl' in item && item.drawingUrl && (
                        <Link
                            href={item.drawingUrl}
                            className="text-sm text-[var(--color-accent)] hover:underline"
                        >
                            üìê –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
                        </Link>
                    )}
                </div>
            </div>

            {/* –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: –¥–ª—è —à–∏–Ω–æ–ø—Ä–æ–≤–æ–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ */}
            {isProduct && item.components?.length > 0 && (
                <div className="mt-10">
                    <h2 className="text-xl font-semibold mb-2">
                        {isKit ? '–°–æ—Å—Ç–∞–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞:' : '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:'}
                    </h2>
                    <ul className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        {item.components.map((c) => (
                            <li key={c.id} className="p-4 border rounded shadow-sm">
                                <div className="font-semibold">{c.component.name}</div>
                                <div className="text-sm text-muted">x{c.quantity}</div>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </main>
    );
}
