// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String    // ← добавляем описание
  products    Busbar[]
  component   Component[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  busbars   Busbar[]
  series    Series[]
  components   Component[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BusbarType {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  busbars   Busbar[]
  components   Component[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Series {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  description String?
  brandId   Int
  brand     Brand     @relation(fields: [brandId], references: [id])
  busbars   Busbar[]
  components   Component[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Busbar {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  amperage    Int          // 60, 100, 1000 и т.д.
  description String?
  imageUrl    String
  specs       Json // JSON или markdown
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  brandId     Int
  brand       Brand        @relation(fields: [brandId], references: [id])
  typeId      Int
  type        BusbarType   @relation(fields: [typeId], references: [id])
  seriesId    Int
  series      Series       @relation(fields: [seriesId], references: [id])
  components  Component[]  @relation("BusbarComponents")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

//Component — детали (подвес, секция, соединитель и т.д.)
model Component {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  type        ComponentType
  description String?
  isOptional  Boolean      @default(false) // если true → дополнительный комплектующий
  imageUrl    String?
  specs       Json
  price       Float
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  brandId     Int
  brand       Brand        @relation(fields: [brandId], references: [id])
  typeId      Int
  busbarType  BusbarType   @relation(fields: [typeId], references: [id])
  seriesId    Int
  series      Series       @relation(fields: [seriesId], references: [id])
  
  busbars     Busbar[]     @relation("BusbarComponents")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ComponentType {
  MAIN        // корпус, подвес, соединение
  ADDITIONAL  // подвод питания, указатель и т.д.
}

model Inquiry {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  message   String
  productId Int?
  createdAt DateTime @default(now())
}